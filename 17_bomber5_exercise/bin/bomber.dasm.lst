------- FILE bomber.dasm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;; Include required files with VCS register memory mapping and macros
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE bomber.dasm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE bomber.dasm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; Declare the variables starting from memory address $80
     11  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12 U0099 ????				      seg.u	Variables
     13 U0080					      org	$80
     14 U0080
     15 U0080		       00	   JetXPos    byte.b		; player 0 x-position
     16 U0081		       00	   JetYPos    byte.b		; player 0 y-position
     17 U0082		       00	   BomberXPos byte.b		; player 1 x-position
     18 U0083		       00	   BomberYPos byte.b		; player 1 y-position
     19 U0084		       00	   Score      byte.b		; 2-digit score stored as BCD
     20 U0085		       00	   Timer      byte.b		; 2-digit timer stored as BCD
     21 U0086		       00	   Temp       byte.b		; auxiliary variable to store temp values
     22 U0087		       00 00	   OnesDigitOffset word.w		; lookup table offset for the score Ones digit
     23 U0089		       00 00	   TensDigitOffset word.w		; lookup table offset for the score Tens digit
     24 U008b		       00 00	   JetSpritePtr word.w		; pointer to player0 sprite lookup table
     25 U008d		       00 00	   JetColorPtr word.w		; pointer to player0 color lookup table
     26 U008f		       00 00	   BomberSpritePtr word.w		; pointer to player1 sprite lookup table
     27 U0091		       00 00	   BomberColorPtr word.w		; pointer to player1 color lookup table
     28 U0093		       00	   JetAnimOffset byte.b		; player0 frame offset for sprite animation
     29 U0094		       00	   Random     byte.b		; used to generate random bomber x-position
     30 U0095		       00	   ScoreSprite byte.b		; store the sprite bit pattern for the score
     31 U0096		       00	   TimerSprite byte.b		; store the sprite bit pattern for the timer
     32 U0097		       00	   TerrainColor byte.b		; store the color of the terrain playfield
     33 U0098		       00	   RiverColor byte.b		; store the color of the river playfield
     34 U0099
     35 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     36 U0099							;; Define constants
     37 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     38 U0099		       00 09	   JET_HEIGHT =	9	; player0 sprite height (# rows in lookup table)
     39 U0099		       00 09	   BOMBER_HEIGHT =	9	; player1 sprite height (# rows in lookup table)
     40 U0099		       00 05	   DIGITS_HEIGHT =	5	; scoreboard digit height (#rows in lookup table)
     41 U0099
     42 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     43 U0099							;; Start our ROM code at memory address $F000
     44 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     45  10000 ????				       seg	Code
     46  f000					      org	$F000
     47  f000
     48  f000				   Reset
      0  f000					      CLEAN_START		; call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     50  f00b
     51  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     52  f00b							;; Initialize RAM variables
     53  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     54  f00b		       a9 44		      lda	#68
     55  f00d		       85 80		      sta	JetXPos	; JetXPos = 68
     56  f00f		       a9 0a		      lda	#10
     57  f011		       85 81		      sta	JetYPos	; JetYPos = 10
     58  f013		       a9 3e		      lda	#62
     59  f015		       85 82		      sta	BomberXPos	; BomberXPos = 62
     60  f017		       a9 53		      lda	#83
     61  f019		       85 83		      sta	BomberYPos	; BomberYPos = 83
     62  f01b		       a9 d4		      lda	#%11010100
     63  f01d		       85 94		      sta	Random	; Random = $D4
     64  f01f		       a9 04		      lda	#4
     65  f021		       85 84		      sta	Score	; Score = 0
     66  f023		       a9 08		      lda	#8
     67  f025		       85 85		      sta	Timer	; Timer = 0
     68  f027
     69  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     70  f027							;; Initialize the pointers to the correct lookup table adresses
     71  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     72  f027		       a9 c7		      lda	#<JetSprite
     73  f029		       85 8b		      sta	JetSpritePtr	; lo-byte pointer for jet sprite lookup table
     74  f02b		       a9 f2		      lda	#>JetSprite
     75  f02d		       85 8c		      sta	JetSpritePtr+1	; hi-byte pointer for jet sprite lookup table
     76  f02f
     77  f02f		       a9 e2		      lda	#<JetColor
     78  f031		       85 8d		      sta	JetColorPtr	; lo-byte pointer for jet color lookup table
     79  f033		       a9 f2		      lda	#>JetColor
     80  f035		       85 8e		      sta	JetColorPtr+1	; hi-byte pointer for jet color lookup table
     81  f037
     82  f037		       a9 d9		      lda	#<BomberSprite
     83  f039		       85 8f		      sta	BomberSpritePtr	; lo-byte pointer for bomber sprite lookup table
     84  f03b		       a9 f2		      lda	#>BomberSprite
     85  f03d		       85 90		      sta	BomberSpritePtr+1	; hi-byte pointer for bomber sprite lookup table
     86  f03f
     87  f03f		       a9 f4		      lda	#<BomberColor
     88  f041		       85 91		      sta	BomberColorPtr	; lo-byte pointer for bomber color lookup table
     89  f043		       a9 f2		      lda	#>BomberColor
     90  f045		       85 92		      sta	BomberColorPtr+1	; hi-byte pointer for bomber color lookup table
     91  f047
     92  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     93  f047							;; Start the main display loop and frame rendering
     94  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     95  f047				   StartFrame
     96  f047
     97  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     98  f047							;; Display VSYNC and VBLANK
     99  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    100  f047		       a9 02		      lda	#2
    101  f049		       85 01		      sta	VBLANK	; turn on VBLANK
    102  f04b		       85 00		      sta	VSYNC	; turn on VSYNC
    103  f04d					      REPEAT	3
    104  f04d		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    103  f04d					      REPEND
    104  f04f		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    103  f04f					      REPEND
    104  f051		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    105  f053					      REPEND
    106  f053		       a9 00		      lda	#0
    107  f055		       85 00		      sta	VSYNC	; turn off VSYNC
    108  f057					      REPEAT	33
    109  f057		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f057					      REPEND
    109  f059		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f059					      REPEND
    109  f05b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f05b					      REPEND
    109  f05d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f05d					      REPEND
    109  f05f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f05f					      REPEND
    109  f061		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f061					      REPEND
    109  f063		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f063					      REPEND
    109  f065		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f065					      REPEND
    109  f067		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f067					      REPEND
    109  f069		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f069					      REPEND
    109  f06b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f06b					      REPEND
    109  f06d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f06d					      REPEND
    109  f06f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f06f					      REPEND
    109  f071		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f071					      REPEND
    109  f073		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f073					      REPEND
    109  f075		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f075					      REPEND
    109  f077		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f077					      REPEND
    109  f079		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f079					      REPEND
    109  f07b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f07b					      REPEND
    109  f07d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f07d					      REPEND
    109  f07f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f07f					      REPEND
    109  f081		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f081					      REPEND
    109  f083		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f083					      REPEND
    109  f085		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f085					      REPEND
    109  f087		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f087					      REPEND
    109  f089		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f089					      REPEND
    109  f08b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f08b					      REPEND
    109  f08d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f08d					      REPEND
    109  f08f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f08f					      REPEND
    109  f091		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f091					      REPEND
    109  f093		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f093					      REPEND
    109  f095		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    108  f095					      REPEND
    109  f097		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    110  f099					      REPEND
    111  f099
    112  f099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    113  f099							;; Calculations and tasks performed in the VBlank
    114  f099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    115  f099		       a5 80		      lda	JetXPos
    116  f09b		       a0 00		      ldy	#0
    117  f09d		       20 19 f2 	      jsr	SetObjectXPos	; set player0 horizontal position
    118  f0a0
    119  f0a0		       a5 82		      lda	BomberXPos
    120  f0a2		       a0 01		      ldy	#1
    121  f0a4		       20 19 f2 	      jsr	SetObjectXPos	; set player1 horizontal position
    122  f0a7
    123  f0a7		       20 56 f2 	      jsr	CalculateDigitOffset	; calculate scoreboard digits lookup table offset
    124  f0aa
    125  f0aa		       85 02		      sta	WSYNC
    126  f0ac		       85 2a		      sta	HMOVE	; apply the horizontal offsets previously set
    127  f0ae
    128  f0ae		       a9 00		      lda	#0
    129  f0b0		       85 01		      sta	VBLANK	; turn off VBLANK
    130  f0b2
    131  f0b2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    132  f0b2							;; Display the scoreboard lines
    133  f0b2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    134  f0b2		       a9 00		      lda	#0	; reset TIA registers before displaying the score
    135  f0b4		       85 09		      sta	COLUBK
    136  f0b6		       85 0d		      sta	PF0
    137  f0b8		       85 0e		      sta	PF1
    138  f0ba		       85 0f		      sta	PF2
    139  f0bc		       85 1b		      sta	GRP0
    140  f0be		       85 1c		      sta	GRP1
    141  f0c0		       85 0a		      sta	CTRLPF
    142  f0c2
    143  f0c2		       a9 1e		      lda	#$1E
    144  f0c4		       85 08		      sta	COLUPF	; set the scoreboard playfield color with yellow
    145  f0c6
    146  f0c6		       a2 05		      ldx	#DIGITS_HEIGHT	; start X counter with 5 (height of digits)
    147  f0c8
    148  f0c8				   .ScoreDigitLoop
    149  f0c8		       a4 89		      ldy	TensDigitOffset	; get the tens digit offset for the Score
    150  f0ca		       b9 77 f2 	      lda	Digits,Y	; load the bit pattern from lookup table
    151  f0cd		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    152  f0cf		       85 95		      sta	ScoreSprite	; save the score tens digit pattern in a variable
    153  f0d1
    154  f0d1		       a4 87		      ldy	OnesDigitOffset	; get the ones digit offset for the Score
    155  f0d3		       b9 77 f2 	      lda	Digits,Y	; load the digit bit pattern from lookup table
    156  f0d6		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    157  f0d8		       05 95		      ora	ScoreSprite	; merge it with the saved tens digit sprite
    158  f0da		       85 95		      sta	ScoreSprite	; and save it
    159  f0dc		       85 02		      sta	WSYNC	; wait for the end of scanline
    160  f0de		       85 0e		      sta	PF1	; update the playfield to display the Score sprite
    161  f0e0
    162  f0e0		       a4 8a		      ldy	TensDigitOffset+1	; get the left digit offset for the Timer
    163  f0e2		       b9 77 f2 	      lda	Digits,Y	; load the digit pattern from lookup table
    164  f0e5		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    165  f0e7		       85 96		      sta	TimerSprite	; save the timer tens digit pattern in a variable
    166  f0e9
    167  f0e9		       a4 88		      ldy	OnesDigitOffset+1	; get the ones digit offset for the Timer
    168  f0eb		       b9 77 f2 	      lda	Digits,Y	; load digit pattern from the lookup table
    169  f0ee		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    170  f0f0		       05 96		      ora	TimerSprite	; merge with the saved tens digit graphics
    171  f0f2		       85 96		      sta	TimerSprite	; and save it
    172  f0f4
    173  f0f4		       20 76 f2 	      jsr	Sleep12Cycles	; wastes some cycles
    174  f0f7
    175  f0f7		       85 0e		      sta	PF1	; update the playfield for Timer display
    176  f0f9
    177  f0f9		       a4 95		      ldy	ScoreSprite	; preload for the next scanline
    178  f0fb		       85 02		      sta	WSYNC	; wait for next scanline
    179  f0fd
    180  f0fd		       84 0e		      sty	PF1	; update playfield for the score display
    181  f0ff		       e6 89		      inc	TensDigitOffset
    182  f101		       e6 8a		      inc	TensDigitOffset+1
    183  f103		       e6 87		      inc	OnesDigitOffset
    184  f105		       e6 88		      inc	OnesDigitOffset+1	; increment all digits for the next line of data
    185  f107
    186  f107		       20 76 f2 	      jsr	Sleep12Cycles	; waste some cycles
    187  f10a
    188  f10a		       ca		      dex		; X--
    189  f10b		       85 0e		      sta	PF1	; update the playfield for the Timer display
    190  f10d		       d0 b9		      bne	.ScoreDigitLoop	; if dex != 0, then branch to ScoreDigitLoop
    191  f10f
    192  f10f		       85 02		      sta	WSYNC
    193  f111
    194  f111		       a9 00		      lda	#0
    195  f113		       85 0d		      sta	PF0
    196  f115		       85 0e		      sta	PF1
    197  f117		       85 0f		      sta	PF2
    198  f119		       85 02		      sta	WSYNC
    199  f11b		       85 02		      sta	WSYNC
    200  f11d		       85 02		      sta	WSYNC
    201  f11f
    202  f11f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    203  f11f							;; Display the remaining visible scanlines of our main game (2-line kernel)
    204  f11f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    205  f11f				   GameVisibleLine
    206  f11f		       a5 97		      lda	TerrainColor
    207  f121		       85 08		      sta	COLUPF	; set the terrain background color
    208  f123
    209  f123		       a5 98		      lda	RiverColor
    210  f125		       85 09		      sta	COLUBK	; set the river background color
    211  f127
    212  f127		       a9 01		      lda	#%00000001
    213  f129		       85 0a		      sta	CTRLPF	; enable playfield reflection
    214  f12b		       a9 f0		      lda	#$F0
    215  f12d		       85 0d		      sta	PF0	; setting PF0 bit pattern
    216  f12f		       a9 fc		      lda	#$FC
    217  f131		       85 0e		      sta	PF1	; setting PF1 bit pattern
    218  f133		       a9 00		      lda	#0
    219  f135		       85 0f		      sta	PF2	; setting PF2 bit pattern
    220  f137
    221  f137		       a2 55		      ldx	#85	; X counts the number of remaining scanlines
    222  f139				   .GameLineLoop
    223  f139				   .AreWeInsideJetSprite
    224  f139		       8a		      txa		; transfer X to A
    225  f13a		       38		      sec		; make sure carry flag is set before subtraction
    226  f13b		       e5 81		      sbc	JetYPos	; subtract sprite Y-coordinate
    227  f13d		       c5 09		      cmp	JET_HEIGHT	; are we inside the sprite height bounds?
    228  f13f		       90 02		      bcc	.DrawSpriteP0	; if result < SpriteHeight, call the draw routine
    229  f141		       a9 00		      lda	#0	; else, set lookup index to zero
    230  f143				   .DrawSpriteP0
    231  f143		       18		      clc		; clear carry flag before addition
    232  f144		       65 93		      adc	JetAnimOffset	; jump to correct sprite frame address in memory
    233  f146		       a8		      tay		; load Y so we can work with the pointer
    234  f147		       b1 8b		      lda	(JetSpritePtr),Y	; load player0 bitmap data from lookup table
    235  f149		       85 02		      sta	WSYNC	; wait for scanline
    236  f14b		       85 1b		      sta	GRP0	; set graphics for player0
    237  f14d		       b1 8d		      lda	(JetColorPtr),Y	; load player color from lookup table
    238  f14f		       85 06		      sta	COLUP0	; set color of player 0
    239  f151
    240  f151				   .AreWeInsideBomberSprite
    241  f151		       8a		      txa		; transfer X to A
    242  f152		       38		      sec		; make sure carry flag is set before subtraction
    243  f153		       e5 83		      sbc	BomberYPos	; subtract sprite Y-coordinate
    244  f155		       c5 09		      cmp	BOMBER_HEIGHT	; are we inside the sprite height bounds?
    245  f157		       90 02		      bcc	.DrawSpriteP1	; if result < SpriteHeight, call the draw routine
    246  f159		       a9 00		      lda	#0	; else, set lookup index to zero
    247  f15b				   .DrawSpriteP1
    248  f15b		       a8		      tay		; load Y so we can work with the pointer
    249  f15c
    250  f15c		       a9 05		      lda	#%00000101
    251  f15e		       85 05		      sta	NUSIZ1	; stretch player 1 sprite
    252  f160
    253  f160		       b1 8f		      lda	(BomberSpritePtr),Y	; load player1 bitmap data from lookup table
    254  f162		       85 02		      sta	WSYNC	; wait for scanline
    255  f164		       85 1c		      sta	GRP1	; set graphics for player1
    256  f166		       b1 91		      lda	(BomberColorPtr),Y	; load player color from lookup table
    257  f168		       85 07		      sta	COLUP1	; set color of player 1
    258  f16a
    259  f16a		       ca		      dex		; X--
    260  f16b		       d0 cc		      bne	.GameLineLoop	; repeat next main game scanline until finished
    261  f16d
    262  f16d		       a9 00		      lda	#0
    263  f16f		       85 93		      sta	JetAnimOffset	; reset jet animation frame to zero each frame
    264  f171
    265  f171		       85 02		      sta	WSYNC	; wait for a scanline
    266  f173
    267  f173							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    268  f173							;; Display Overscan
    269  f173							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    270  f173		       a9 02		      lda	#2
    271  f175		       85 01		      sta	VBLANK	; turn on VBLANK again
    272  f177					      REPEAT	30
    273  f177		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f177					      REPEND
    273  f179		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f179					      REPEND
    273  f17b		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f17b					      REPEND
    273  f17d		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f17d					      REPEND
    273  f17f		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f17f					      REPEND
    273  f181		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f181					      REPEND
    273  f183		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f183					      REPEND
    273  f185		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f185					      REPEND
    273  f187		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f187					      REPEND
    273  f189		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f189					      REPEND
    273  f18b		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f18b					      REPEND
    273  f18d		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f18d					      REPEND
    273  f18f		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f18f					      REPEND
    273  f191		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f191					      REPEND
    273  f193		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f193					      REPEND
    273  f195		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f195					      REPEND
    273  f197		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f197					      REPEND
    273  f199		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f199					      REPEND
    273  f19b		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f19b					      REPEND
    273  f19d		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f19d					      REPEND
    273  f19f		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f19f					      REPEND
    273  f1a1		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f1a1					      REPEND
    273  f1a3		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f1a3					      REPEND
    273  f1a5		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f1a5					      REPEND
    273  f1a7		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f1a7					      REPEND
    273  f1a9		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f1a9					      REPEND
    273  f1ab		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f1ab					      REPEND
    273  f1ad		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f1ad					      REPEND
    273  f1af		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    272  f1af					      REPEND
    273  f1b1		       85 02		      sta	WSYNC	; display recommended lines of VBlank Overscan
    274  f1b3					      REPEND
    275  f1b3		       a9 00		      lda	#0
    276  f1b5		       85 01		      sta	VBLANK	; turn off VBLANK
    277  f1b7
    278  f1b7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    279  f1b7							;; Process joystick input for player 0 movement
    280  f1b7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    281  f1b7				   CheckP0Up
    282  f1b7		       a9 10		      lda	#%00010000	; bit pattern to check if P0 joystick is up
    283  f1b9		       2c 80 02 	      bit	SWCHA	; if (bit pattern is not joystick up)
    284  f1bc		       d0 06		      bne	CheckP0Down	;     then: skip to test next input option
    285  f1be				   .P0IsUp		;     else:
    286  f1be		       e6 81		      inc	JetYPos	;	   increment jet Y position
    287  f1c0		       a9 00		      lda	#0
    288  f1c2		       85 93		      sta	JetAnimOffset	;	   set jet frame of animation to first one
    289  f1c4
    290  f1c4				   CheckP0Down
    291  f1c4		       a9 20		      lda	#%00100000	; bit pattern to check if P0 joystick is down
    292  f1c6		       2c 80 02 	      bit	SWCHA	; if (bit pattern is not joystick down)
    293  f1c9		       d0 06		      bne	CheckP0Left	;     then: skip to test next input option
    294  f1cb				   .P0IsDown		;     else:
    295  f1cb		       c6 81		      dec	JetYPos	;	   decrement jet Y position
    296  f1cd		       a9 00		      lda	#0
    297  f1cf		       85 93		      sta	JetAnimOffset	;	   set jet frame of animation to first one
    298  f1d1
    299  f1d1				   CheckP0Left
    300  f1d1		       a9 40		      lda	#%01000000	; bit pattern to check if P0 joystick is left
    301  f1d3		       2c 80 02 	      bit	SWCHA	; if (bit pattern is not joystick left)
    302  f1d6		       d0 06		      bne	CheckP0Right	;     then: skip to test next input option
    303  f1d8				   .P0IsLeft		;     else:
    304  f1d8		       c6 80		      dec	JetXPos	;	   decrement jet X position
    305  f1da		       a5 09		      lda	JET_HEIGHT
    306  f1dc		       85 93		      sta	JetAnimOffset	;	   set jet to second frame of animation
    307  f1de
    308  f1de				   CheckP0Right
    309  f1de		       a9 80		      lda	#%10000000	; bit pattern to check if P0 joystick is right
    310  f1e0		       2c 80 02 	      bit	SWCHA	; if (bit pattern is not joystick right)
    311  f1e3		       d0 06		      bne	EndInputCheck	;     then: skip to test next input option
    312  f1e5				   .P0IsRight		;     else:
    313  f1e5		       e6 80		      inc	JetXPos	;	   increment jet X position
    314  f1e7		       a5 09		      lda	JET_HEIGHT
    315  f1e9		       85 93		      sta	JetAnimOffset	;	   set jet to second frame of animation
    316  f1eb
    317  f1eb				   EndInputCheck		; fallback when no input was performed
    318  f1eb
    319  f1eb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    320  f1eb							;; Calculations to update position for next frame
    321  f1eb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    322  f1eb				   UpdateBomberPosition
    323  f1eb		       a5 83		      lda	BomberYPos
    324  f1ed		       18		      clc
    325  f1ee		       c9 00		      cmp	#0	; compare bomber y-position with 0
    326  f1f0		       30 05		      bmi	.ResetBomberPosition	; if it is < 0, then reset y-position to the top
    327  f1f2		       c6 83		      dec	BomberYPos	; else, decrement enemy y-position for next frame
    328  f1f4		       4c fc f1 	      jmp	EndPositionUpdate
    329  f1f7				   .ResetBomberPosition
    330  f1f7		       e6 84		      inc	Score
    331  f1f9		       20 38 f2 	      jsr	GetRandomBomberPos	; call subroutine for random bomber position
    332  f1fc
    333  f1fc				   EndPositionUpdate		; fallback for the position update code
    334  f1fc
    335  f1fc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    336  f1fc							;; Check for object collision
    337  f1fc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    338  f1fc				   CheckCollisionP0P1
    339  f1fc		       a9 80		      lda	#%10000000	; CXPPMM bit 7 detects P0 and P1 collision
    340  f1fe		       24 07		      bit	CXPPMM	; check CXPPMM bit 7 with the above pattern
    341  f200		       d0 06		      bne	.P0P1Collided	; if collision between P0 and P1 happened, branch
    342  f202		       20 10 f2 	      jsr	SetTerrainRiverColor	; else, set playfield color to green/blue
    343  f205		       4c 0b f2 	      jmp	EndCollisionCheck	; else, skip to next check
    344  f208				   .P0P1Collided
    345  f208		       20 2d f2 	      jsr	GameOver	; call GameOver subroutine
    346  f20b
    347  f20b				   EndCollisionCheck		; fallback
    348  f20b		       85 2c		      sta	CXCLR	; clear all collision flags before the next frame
    349  f20d
    350  f20d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    351  f20d							;; Loop back to start a brand new frame
    352  f20d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    353  f20d		       4c 47 f0 	      jmp	StartFrame	; continue to display the next frame
    354  f210
    355  f210							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    356  f210							;; Set the colors for the terrain and river to green & blue
    357  f210							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    358  f210				   SetTerrainRiverColor subroutine
    359  f210		       a9 c2		      lda	#$C2
    360  f212		       85 97		      sta	TerrainColor	; set terrain color to green
    361  f214		       a9 84		      lda	#$84
    362  f216		       85 98		      sta	RiverColor	; set river color to blue
    363  f218		       60		      rts
    364  f219
    365  f219							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    366  f219							;; Subroutine to handle object horizontal position with fine offset
    367  f219							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    368  f219							;; A is the target x-coordinate position in pixels of our object
    369  f219							;; Y is the object type (0:player0, 1:player1, 2:missile0, 3:missile1, 4:ball)
    370  f219							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    371  f219				   SetObjectXPos subroutine
    372  f219		       85 02		      sta	WSYNC	; start a fresh new scanline
    373  f21b		       38		      sec		; make sure carry-flag is set before subtracion
    374  f21c				   .Div15Loop
    375  f21c		       e9 0f		      sbc	#15	; subtract 15 from accumulator
    376  f21e		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    377  f220		       49 07		      eor	#7	; handle offset range from -8 to 7
    378  f222		       0a		      asl
    379  f223		       0a		      asl
    380  f224		       0a		      asl
    381  f225		       0a		      asl		; four shift lefts to get only the top 4 bits
    382  f226		       99 20 00 	      sta	HMP0,Y	; store the fine offset to the correct HMxx
    383  f229		       99 10 00 	      sta	RESP0,Y	; fix object position in 15-step increment
    384  f22c		       60		      rts
    385  f22d
    386  f22d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    387  f22d							;; Game Over subroutine
    388  f22d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    389  f22d				   GameOver   subroutine
    390  f22d		       a9 30		      lda	#$30
    391  f22f		       85 97		      sta	TerrainColor	; set terrain color to red
    392  f231		       85 98		      sta	RiverColor	; set river color to red
    393  f233		       a9 00		      lda	#0
    394  f235		       85 84		      sta	Score	; Score = 0
    395  f237		       60		      rts
    396  f238
    397  f238							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    398  f238							;; Subroutine to generate a Linear-Feedback Shift Register random number
    399  f238							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    400  f238							;; Generate a LFSR random number for the X-position of the bomber.
    401  f238							;; Divide the random value by 4 to limit the size of the result to match river.
    402  f238							;; Add 30 to compensate for the left green playfield
    403  f238							;; The routine also sets the Y-position of the bomber to the top of the screen.
    404  f238							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    405  f238				   GetRandomBomberPos subroutine
    406  f238		       a5 94		      lda	Random
    407  f23a		       0a		      asl
    408  f23b		       45 94		      eor	Random
    409  f23d		       0a		      asl
    410  f23e		       45 94		      eor	Random
    411  f240		       0a		      asl
    412  f241		       0a		      asl
    413  f242		       45 94		      eor	Random
    414  f244		       0a		      asl
    415  f245		       26 94		      rol	Random	; performs a series of shifts and bit operations
    416  f247		       4a		      lsr
    417  f248		       4a		      lsr		; divide the value by 4 with 2 right shifts
    418  f249		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    419  f24b		       a9 1e		      lda	#30
    420  f24d		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate for left PF
    421  f24f		       85 82		      sta	BomberXPos	; and sets the new value to the bomber x-position
    422  f251
    423  f251		       a9 60		      lda	#96
    424  f253		       85 83		      sta	BomberYPos	; set the y-position to the top of the screen
    425  f255
    426  f255		       60		      rts
    427  f256
    428  f256							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    429  f256							;; Subroutine to handle scoreboard digits to be displayed on the screen
    430  f256							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    431  f256							;; The scoreboard is stored using BCD, so the display shows hex numbers.
    432  f256							;; This converts the high and low nibbles of the variable Score and Timer
    433  f256							;; into the offsets of digits lookup table so the values can be displayed.
    434  f256							;; Each digit has a height of 5 bytes in the lookup table.
    435  f256							;;
    436  f256							;; For the low nibble we need to multiply by 5
    437  f256							;;   - we can use left shifts to perform multiplication by 2
    438  f256							;;   - for any number N, the value of N*5 = (N*2*2)+N
    439  f256							;;
    440  f256							;; For the upper nibble, since its already times 16, we need to divide it
    441  f256							;; and then multiply by 5:
    442  f256							;;   - we can use right shifts to perform division by 2
    443  f256							;;   - for any number N, the value of (N/16)*5 is equal to (N/4)+(N/16)
    444  f256							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    445  f256				   CalculateDigitOffset subroutine
    446  f256		       a2 01		      ldx	#1	; X register is the loop counter
    447  f258				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    448  f258
    449  f258		       b5 84		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    450  f25a		       29 0f		      and	#$0F	; remove the tens digit by masking 4 bits 00001111
    451  f25c		       85 86		      sta	Temp	; save the value of A into Temp
    452  f25e		       0a		      asl		; shift left (it is now N*2)
    453  f25f		       0a		      asl		; shift left (it is now N*4)
    454  f260		       65 86		      adc	Temp	; add the value saved in Temp (+N)
    455  f262		       95 87		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset
    456  f264
    457  f264		       b5 84		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    458  f266		       29 f0		      and	#$F0	; remove the ones digit by masking 4 bits 11110000
    459  f268		       4a		      lsr		; shift right (it is now N/2)
    460  f269		       4a		      lsr		; shift right (it is now N/4)
    461  f26a		       85 86		      sta	Temp	; save the value of A into Temp
    462  f26c		       4a		      lsr		; shift right (it is now N/8)
    463  f26d		       4a		      lsr		; shift right (it is now N/16)
    464  f26e		       65 86		      adc	Temp	; add the value saved in Temp (N/16+N/4)
    465  f270		       95 89		      sta	TensDigitOffset,X	; store A in TensDigitOffset+1 or TensDigitOffset
    466  f272
    467  f272		       ca		      dex		; X--
    468  f273		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0, loop to pass a second time
    469  f275
    470  f275		       60		      rts
    471  f276
    472  f276							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    473  f276							;; Subroutine to waste 12 cycles
    474  f276							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    475  f276							;; jsr takes 6 cycles
    476  f276							;; rts takes 6 cycles
    477  f276							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    478  f276				   Sleep12Cycles subroutine
    479  f276		       60		      rts
    480  f277
    481  f277							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    482  f277							;; Declare ROM lookup tables
    483  f277							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    484  f277				   Digits
    485  f277		       77		      .byte.b	%01110111	; ### ###
    486  f278		       55		      .byte.b	%01010101	; # # # #
    487  f279		       55		      .byte.b	%01010101	; # # # #
    488  f27a		       55		      .byte.b	%01010101	; # # # #
    489  f27b		       77		      .byte.b	%01110111	; ### ###
    490  f27c
    491  f27c		       11		      .byte.b	%00010001	;   #	 #
    492  f27d		       11		      .byte.b	%00010001	;   #	 #
    493  f27e		       11		      .byte.b	%00010001	;   #	 #
    494  f27f		       11		      .byte.b	%00010001	;   #	 #
    495  f280		       11		      .byte.b	%00010001	;   #	 #
    496  f281
    497  f281		       77		      .byte.b	%01110111	; ### ###
    498  f282		       11		      .byte.b	%00010001	;   #	 #
    499  f283		       77		      .byte.b	%01110111	; ### ###
    500  f284		       44		      .byte.b	%01000100	; #   #
    501  f285		       77		      .byte.b	%01110111	; ### ###
    502  f286
    503  f286		       77		      .byte.b	%01110111	; ### ###
    504  f287		       11		      .byte.b	%00010001	;   #	 #
    505  f288		       33		      .byte.b	%00110011	;  ##	##
    506  f289		       11		      .byte.b	%00010001	;   #	 #
    507  f28a		       77		      .byte.b	%01110111	; ### ###
    508  f28b
    509  f28b		       55		      .byte.b	%01010101	; # # # #
    510  f28c		       55		      .byte.b	%01010101	; # # # #
    511  f28d		       77		      .byte.b	%01110111	; ### ###
    512  f28e		       11		      .byte.b	%00010001	;   #	 #
    513  f28f		       11		      .byte.b	%00010001	;   #	 #
    514  f290
    515  f290		       77		      .byte.b	%01110111	; ### ###
    516  f291		       44		      .byte.b	%01000100	; #   #
    517  f292		       77		      .byte.b	%01110111	; ### ###
    518  f293		       11		      .byte.b	%00010001	;   #	 #
    519  f294		       77		      .byte.b	%01110111	; ### ###
    520  f295
    521  f295		       77		      .byte.b	%01110111	; ### ###
    522  f296		       44		      .byte.b	%01000100	; #   #
    523  f297		       77		      .byte.b	%01110111	; ### ###
    524  f298		       55		      .byte.b	%01010101	; # # # #
    525  f299		       77		      .byte.b	%01110111	; ### ###
    526  f29a
    527  f29a		       77		      .byte.b	%01110111	; ### ###
    528  f29b		       11		      .byte.b	%00010001	;   #	 #
    529  f29c		       11		      .byte.b	%00010001	;   #	 #
    530  f29d		       11		      .byte.b	%00010001	;   #	 #
    531  f29e		       11		      .byte.b	%00010001	;   #	 #
    532  f29f
    533  f29f		       77		      .byte.b	%01110111	; ### ###
    534  f2a0		       55		      .byte.b	%01010101	; # # # #
    535  f2a1		       77		      .byte.b	%01110111	; ### ###
    536  f2a2		       55		      .byte.b	%01010101	; # # # #
    537  f2a3		       77		      .byte.b	%01110111	; ### ###
    538  f2a4
    539  f2a4		       77		      .byte.b	%01110111	; ### ###
    540  f2a5		       55		      .byte.b	%01010101	; # # # #
    541  f2a6		       77		      .byte.b	%01110111	; ### ###
    542  f2a7		       11		      .byte.b	%00010001	;   #	 #
    543  f2a8		       77		      .byte.b	%01110111	; ### ###
    544  f2a9
    545  f2a9		       22		      .byte.b	%00100010	;  #	#
    546  f2aa		       55		      .byte.b	%01010101	; # # # #
    547  f2ab		       77		      .byte.b	%01110111	; ### ###
    548  f2ac		       55		      .byte.b	%01010101	; # # # #
    549  f2ad		       55		      .byte.b	%01010101	; # # # #
    550  f2ae
    551  f2ae		       77		      .byte.b	%01110111	; ### ###
    552  f2af		       55		      .byte.b	%01010101	; # # # #
    553  f2b0		       66		      .byte.b	%01100110	; ##  ##
    554  f2b1		       55		      .byte.b	%01010101	; # # # #
    555  f2b2		       77		      .byte.b	%01110111	; ### ###
    556  f2b3
    557  f2b3		       77		      .byte.b	%01110111	; ### ###
    558  f2b4		       44		      .byte.b	%01000100	; #   #
    559  f2b5		       44		      .byte.b	%01000100	; #   #
    560  f2b6		       44		      .byte.b	%01000100	; #   #
    561  f2b7		       77		      .byte.b	%01110111	; ### ###
    562  f2b8
    563  f2b8		       66		      .byte.b	%01100110	; ##  ##
    564  f2b9		       55		      .byte.b	%01010101	; # # # #
    565  f2ba		       55		      .byte.b	%01010101	; # # # #
    566  f2bb		       55		      .byte.b	%01010101	; # # # #
    567  f2bc		       66		      .byte.b	%01100110	; ##  ##
    568  f2bd
    569  f2bd		       77		      .byte.b	%01110111	; ### ###
    570  f2be		       44		      .byte.b	%01000100	; #   #
    571  f2bf		       77		      .byte.b	%01110111	; ### ###
    572  f2c0		       44		      .byte.b	%01000100	; #   #
    573  f2c1		       77		      .byte.b	%01110111	; ### ###
    574  f2c2
    575  f2c2		       77		      .byte.b	%01110111	; ### ###
    576  f2c3		       44		      .byte.b	%01000100	; #   #
    577  f2c4		       66		      .byte.b	%01100110	; ##  ##
    578  f2c5		       44		      .byte.b	%01000100	; #   #
    579  f2c6		       44		      .byte.b	%01000100	; #   #
    580  f2c7
    581  f2c7				   JetSprite
    582  f2c7		       00		      .byte.b	#%00000000	;
    583  f2c8		       14		      .byte.b	#%00010100	;   # #
    584  f2c9		       7f		      .byte.b	#%01111111	; #######
    585  f2ca		       3e		      .byte.b	#%00111110	;  #####
    586  f2cb		       1c		      .byte.b	#%00011100	;   ###
    587  f2cc		       1c		      .byte.b	#%00011100	;   ###
    588  f2cd		       08		      .byte.b	#%00001000	;    #
    589  f2ce		       08		      .byte.b	#%00001000	;    #
    590  f2cf		       08		      .byte.b	#%00001000	;    #
    591  f2d0
    592  f2d0				   JetSpriteTurn
    593  f2d0		       00		      .byte.b	#%00000000	;
    594  f2d1		       08		      .byte.b	#%00001000	;    #
    595  f2d2		       3e		      .byte.b	#%00111110	;  #####
    596  f2d3		       1c		      .byte.b	#%00011100	;   ###
    597  f2d4		       1c		      .byte.b	#%00011100	;   ###
    598  f2d5		       1c		      .byte.b	#%00011100	;   ###
    599  f2d6		       08		      .byte.b	#%00001000	;    #
    600  f2d7		       08		      .byte.b	#%00001000	;    #
    601  f2d8		       08		      .byte.b	#%00001000	;    #
    602  f2d9
    603  f2d9				   BomberSprite
    604  f2d9		       00		      .byte.b	#%00000000	;
    605  f2da		       08		      .byte.b	#%00001000	;    #
    606  f2db		       08		      .byte.b	#%00001000	;    #
    607  f2dc		       2a		      .byte.b	#%00101010	;  # # #
    608  f2dd		       3e		      .byte.b	#%00111110	;  #####
    609  f2de		       7f		      .byte.b	#%01111111	; #######
    610  f2df		       2a		      .byte.b	#%00101010	;  # # #
    611  f2e0		       08		      .byte.b	#%00001000	;    #
    612  f2e1		       1c		      .byte.b	#%00011100	;   ###
    613  f2e2
    614  f2e2				   JetColor
    615  f2e2		       00		      .byte.b	#$00
    616  f2e3		       fe		      .byte.b	#$FE
    617  f2e4		       0c		      .byte.b	#$0C
    618  f2e5		       0e		      .byte.b	#$0E
    619  f2e6		       0e		      .byte.b	#$0E
    620  f2e7		       04		      .byte.b	#$04
    621  f2e8		       ba		      .byte.b	#$BA
    622  f2e9		       0e		      .byte.b	#$0E
    623  f2ea		       08		      .byte.b	#$08
    624  f2eb
    625  f2eb				   JetColorTurn
    626  f2eb		       00		      .byte.b	#$00
    627  f2ec		       fe		      .byte.b	#$FE
    628  f2ed		       0c		      .byte.b	#$0C
    629  f2ee		       0e		      .byte.b	#$0E
    630  f2ef		       0e		      .byte.b	#$0E
    631  f2f0		       04		      .byte.b	#$04
    632  f2f1		       0e		      .byte.b	#$0E
    633  f2f2		       0e		      .byte.b	#$0E
    634  f2f3		       08		      .byte.b	#$08
    635  f2f4
    636  f2f4				   BomberColor
    637  f2f4		       00		      .byte.b	#$00
    638  f2f5		       32		      .byte.b	#$32
    639  f2f6		       32		      .byte.b	#$32
    640  f2f7		       0e		      .byte.b	#$0E
    641  f2f8		       40		      .byte.b	#$40
    642  f2f9		       40		      .byte.b	#$40
    643  f2fa		       40		      .byte.b	#$40
    644  f2fb		       40		      .byte.b	#$40
    645  f2fc		       40		      .byte.b	#$40
    646  f2fd
    647  f2fd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    648  f2fd							;; Complete ROM size with exactly 4KB
    649  f2fd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    650  fffc					      org	$FFFC	; move to position $FFFC
    651  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    652  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
