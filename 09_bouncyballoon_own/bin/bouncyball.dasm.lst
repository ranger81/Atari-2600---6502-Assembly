------- FILE bouncyball.dasm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;; Include required files with register mapping and macros
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE bouncyball.dasm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE bouncyball.dasm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; Start an uninitialized segment at $80 for var declaration.
     11  0000 ????						;; We have memory from $80 to $FF to work with, minus a few at
     12  0000 ????						;; the end if we use the stack.
     13  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     14 U0088 ????				      seg.u	Variables
     15 U0080					      org	$80
     16 U0080		       00	   P0XPos     byte.b		; player 0 X coordinate
     17 U0081		       00	   P0YPos     byte.b		; player 0 Y coordinate
     18 U0082		       00	   P0Direction byte.b		; player 0 move direction (see info.txt)
     19 U0083		       00	   P0XMin     byte.b		; player 0 minimum X coordinate
     20 U0084		       00	   P0XMax     byte.b		; player 0 maximum X coordinate
     21 U0085		       00	   P0YMin     byte.b		; player 0 minimum Y coordinate
     22 U0086		       00	   P0YMax     byte.b		; player 0 maximum Y coordinate
     23 U0087		       00	   P0Height   byte.b		; player 0 height
     24 U0088
     25 U0088							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     26 U0088							;; Start our ROM code segment starting at $F000.
     27 U0088							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     28  10000 ????				       seg	Code
     29  f000					      org	$F000
     30  f000
     31  f000				   Reset
      0  f000					      CLEAN_START		; macro to clean memory and TIA
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     33  f00b
     34  f00b		       a2 7a		      ldx	#$7A	; light purple background color
     35  f00d		       86 09		      stx	COLUBK
     36  f00f
     37  f00f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     38  f00f							;; Initialize variables
     39  f00f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     40  f00f		       a9 05		      lda	#5
     41  f011		       85 83		      sta	P0XMin	; set player 0 minimum X coordinate
     42  f013		       a9 7f		      lda	#127
     43  f015		       85 84		      sta	P0XMax	; set player 0 maximum X coordinate
     44  f017		       a9 0a		      lda	#10
     45  f019		       85 85		      sta	P0YMin	; set player 0 minumum Y coordinate
     46  f01b		       a9 a0		      lda	#160
     47  f01d		       85 86		      sta	P0YMax	; set player 0 maximum Y coordinate
     48  f01f
     49  f01f		       a9 09		      lda	#9
     50  f021		       85 87		      sta	P0Height	; set player 0 sprite height
     51  f023
     52  f023		       a5 01		      lda	%00000001	; down and right
     53  f025		       85 82		      sta	P0Direction	; set player 0 initial directions
     54  f027
     55  f027		       a9 28		      lda	#40
     56  f029		       85 80		      sta	P0XPos	; initial player 0 X position
     57  f02b		       a9 0a		      lda	#10
     58  f02d		       85 81		      sta	P0YPos	; initial player 0 Y position
     59  f02f
     60  f02f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     61  f02f							;; Start a new frame by configuring VBLANK and VSYNC
     62  f02f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     63  f02f				   StartFrame
     64  f02f		       a9 02		      lda	#2
     65  f031		       85 01		      sta	VBLANK	; turn VBLANK on
     66  f033		       85 00		      sta	VSYNC	; turn VSYNC on
     67  f035
     68  f035							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     69  f035							;; Display 3 vertical lines of VSYNC
     70  f035							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     71  f035					      REPEAT	3
     72  f035		       85 02		      sta	WSYNC	; first three VSYNC scanlines
     71  f035					      REPEND
     72  f037		       85 02		      sta	WSYNC	; first three VSYNC scanlines
     71  f037					      REPEND
     72  f039		       85 02		      sta	WSYNC	; first three VSYNC scanlines
     73  f03b					      REPEND
     74  f03b		       a9 00		      lda	#0
     75  f03d		       85 00		      sta	VSYNC	; turn VSYNC off
     76  f03f
     77  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     78  f03f							;; Set player horizontal position while in VBLANK
     79  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  f03f		       a5 80		      lda	P0XPos	; load register A with desired X position
     81  f041		       29 7f		      and	#$7F	; same as AND 01111111, forces bit 7 to zero
     82  f043							; keeping the result positive
     83  f043
     84  f043		       38		      sec		; set carry flag before subtraction
     85  f044
     86  f044		       85 02		      sta	WSYNC	; wait for next scanline
     87  f046		       85 2b		      sta	HMCLR	; clear old horizontal position values
     88  f048
     89  f048				   DivideLoop
     90  f048		       e9 0f		      sbc	#15	; Subtract 15 from A
     91  f04a		       b0 fc		      bcs	DivideLoop	; loop while carry flag is still set
     92  f04c
     93  f04c		       49 07		      eor	#7	; adjust the remainder in A between -8 and 7
     94  f04e		       0a		      asl		; shift left by 4, as HMP0 uses only 4 bits
     95  f04f		       0a		      asl
     96  f050		       0a		      asl
     97  f051		       0a		      asl
     98  f052		       85 20		      sta	HMP0	; set smooth position value
     99  f054		       85 10		      sta	RESP0	; fix rough position
    100  f056		       85 02		      sta	WSYNC	; wait for next scanline
    101  f058		       85 2a		      sta	HMOVE	; apply the fine position offset
    102  f05a
    103  f05a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    104  f05a							;; Let the TIA output the 35 (37-2) recommended lines of VBLANK
    105  f05a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    106  f05a					      REPEAT	35
    107  f05a		       85 02		      sta	WSYNC
    106  f05a					      REPEND
    107  f05c		       85 02		      sta	WSYNC
    106  f05c					      REPEND
    107  f05e		       85 02		      sta	WSYNC
    106  f05e					      REPEND
    107  f060		       85 02		      sta	WSYNC
    106  f060					      REPEND
    107  f062		       85 02		      sta	WSYNC
    106  f062					      REPEND
    107  f064		       85 02		      sta	WSYNC
    106  f064					      REPEND
    107  f066		       85 02		      sta	WSYNC
    106  f066					      REPEND
    107  f068		       85 02		      sta	WSYNC
    106  f068					      REPEND
    107  f06a		       85 02		      sta	WSYNC
    106  f06a					      REPEND
    107  f06c		       85 02		      sta	WSYNC
    106  f06c					      REPEND
    107  f06e		       85 02		      sta	WSYNC
    106  f06e					      REPEND
    107  f070		       85 02		      sta	WSYNC
    106  f070					      REPEND
    107  f072		       85 02		      sta	WSYNC
    106  f072					      REPEND
    107  f074		       85 02		      sta	WSYNC
    106  f074					      REPEND
    107  f076		       85 02		      sta	WSYNC
    106  f076					      REPEND
    107  f078		       85 02		      sta	WSYNC
    106  f078					      REPEND
    107  f07a		       85 02		      sta	WSYNC
    106  f07a					      REPEND
    107  f07c		       85 02		      sta	WSYNC
    106  f07c					      REPEND
    107  f07e		       85 02		      sta	WSYNC
    106  f07e					      REPEND
    107  f080		       85 02		      sta	WSYNC
    106  f080					      REPEND
    107  f082		       85 02		      sta	WSYNC
    106  f082					      REPEND
    107  f084		       85 02		      sta	WSYNC
    106  f084					      REPEND
    107  f086		       85 02		      sta	WSYNC
    106  f086					      REPEND
    107  f088		       85 02		      sta	WSYNC
    106  f088					      REPEND
    107  f08a		       85 02		      sta	WSYNC
    106  f08a					      REPEND
    107  f08c		       85 02		      sta	WSYNC
    106  f08c					      REPEND
    107  f08e		       85 02		      sta	WSYNC
    106  f08e					      REPEND
    107  f090		       85 02		      sta	WSYNC
    106  f090					      REPEND
    107  f092		       85 02		      sta	WSYNC
    106  f092					      REPEND
    107  f094		       85 02		      sta	WSYNC
    106  f094					      REPEND
    107  f096		       85 02		      sta	WSYNC
    106  f096					      REPEND
    107  f098		       85 02		      sta	WSYNC
    106  f098					      REPEND
    107  f09a		       85 02		      sta	WSYNC
    106  f09a					      REPEND
    107  f09c		       85 02		      sta	WSYNC
    106  f09c					      REPEND
    107  f09e		       85 02		      sta	WSYNC
    108  f0a0					      REPEND
    109  f0a0
    110  f0a0		       a9 00		      lda	#0
    111  f0a2		       85 01		      sta	VBLANK	; turn VBLANK off
    112  f0a4
    113  f0a4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    114  f0a4							;; Draw the 192 visible scanlines
    115  f0a4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    116  f0a4							;    REPEAT 60
    117  f0a4							;	  sta WSYNC  ; wait for 60 empty scanlines
    118  f0a4							;    REPEND
    119  f0a4							;
    120  f0a4							;    ldy 8	     ; counter to draw 8 rows of bitmap
    121  f0a4							;DrawBitmap:
    122  f0a4							;    lda P0Bitmap,Y ; load player bitmap slice of data
    123  f0a4							;    sta GRP0	     ; set graphics for player 0 slice
    124  f0a4							;
    125  f0a4							;    lda P0Color,Y  ; load player color from lookup table
    126  f0a4							;    sta COLUP0     ; set color for player 0 slice
    127  f0a4							;
    128  f0a4							;    sta WSYNC      ; wait for next scanline
    129  f0a4							;
    130  f0a4							;    dey
    131  f0a4							;    bne DrawBitmap ; repeat next scanline until finished
    132  f0a4							;
    133  f0a4							;    lda #0
    134  f0a4							;    sta GRP0	     ; disable P0 bitmap graphics
    135  f0a4							;
    136  f0a4							;    REPEAT 124
    137  f0a4							;	  sta WSYNC  ; wait for remaining 124 empty scanlines
    138  f0a4							;    REPEND
    139  f0a4
    140  f0a4							;-----------------------------------------
    141  f0a4		       a2 c0		      ldx	#192	; X counter contains the remaining scanlines
    142  f0a6				   Scanline
    143  f0a6		       8a		      txa		; transfer X to A
    144  f0a7		       38		      sec		; make sure carry flag is set
    145  f0a8		       e5 81		      sbc	P0YPos	; subtract sprite Y coordinate
    146  f0aa		       c5 87		      cmp	P0Height	; are we inside the sprite height bounds?
    147  f0ac		       90 02		      bcc	LoadBitmap	; if result < SpriteHeight, call subroutine
    148  f0ae		       a9 00		      lda	#0	; else, set index to 0
    149  f0b0				   LoadBitmap
    150  f0b0		       a8		      tay
    151  f0b1		       b9 53 f1 	      lda	P0Bitmap,Y	; load player bitmap slice of data
    152  f0b4		       85 02		      sta	WSYNC	; wait for next scanline
    153  f0b6		       85 1b		      sta	GRP0	; set graphics for player 0 slice
    154  f0b8		       b9 5c f1 	      lda	P0Color,Y	; load player color from lookup table
    155  f0bb		       85 06		      sta	COLUP0	; set color for player 0 slice
    156  f0bd		       ca		      dex
    157  f0be		       d0 e6		      bne	Scanline	; repeat next scanline until finished
    158  f0c0
    159  f0c0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    160  f0c0							;; Output 30 more VBLANK overscan lines to complete our frame
    161  f0c0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    162  f0c0				   Overscan
    163  f0c0		       a9 02		      lda	#2
    164  f0c2		       85 01		      sta	VBLANK	; turn VBLANK on again for overscan
    165  f0c4					      REPEAT	30
    166  f0c4		       85 02		      sta	WSYNC
    165  f0c4					      REPEND
    166  f0c6		       85 02		      sta	WSYNC
    165  f0c6					      REPEND
    166  f0c8		       85 02		      sta	WSYNC
    165  f0c8					      REPEND
    166  f0ca		       85 02		      sta	WSYNC
    165  f0ca					      REPEND
    166  f0cc		       85 02		      sta	WSYNC
    165  f0cc					      REPEND
    166  f0ce		       85 02		      sta	WSYNC
    165  f0ce					      REPEND
    166  f0d0		       85 02		      sta	WSYNC
    165  f0d0					      REPEND
    166  f0d2		       85 02		      sta	WSYNC
    165  f0d2					      REPEND
    166  f0d4		       85 02		      sta	WSYNC
    165  f0d4					      REPEND
    166  f0d6		       85 02		      sta	WSYNC
    165  f0d6					      REPEND
    166  f0d8		       85 02		      sta	WSYNC
    165  f0d8					      REPEND
    166  f0da		       85 02		      sta	WSYNC
    165  f0da					      REPEND
    166  f0dc		       85 02		      sta	WSYNC
    165  f0dc					      REPEND
    166  f0de		       85 02		      sta	WSYNC
    165  f0de					      REPEND
    166  f0e0		       85 02		      sta	WSYNC
    165  f0e0					      REPEND
    166  f0e2		       85 02		      sta	WSYNC
    165  f0e2					      REPEND
    166  f0e4		       85 02		      sta	WSYNC
    165  f0e4					      REPEND
    166  f0e6		       85 02		      sta	WSYNC
    165  f0e6					      REPEND
    166  f0e8		       85 02		      sta	WSYNC
    165  f0e8					      REPEND
    166  f0ea		       85 02		      sta	WSYNC
    165  f0ea					      REPEND
    166  f0ec		       85 02		      sta	WSYNC
    165  f0ec					      REPEND
    166  f0ee		       85 02		      sta	WSYNC
    165  f0ee					      REPEND
    166  f0f0		       85 02		      sta	WSYNC
    165  f0f0					      REPEND
    166  f0f2		       85 02		      sta	WSYNC
    165  f0f2					      REPEND
    166  f0f4		       85 02		      sta	WSYNC
    165  f0f4					      REPEND
    166  f0f6		       85 02		      sta	WSYNC
    165  f0f6					      REPEND
    166  f0f8		       85 02		      sta	WSYNC
    165  f0f8					      REPEND
    166  f0fa		       85 02		      sta	WSYNC
    165  f0fa					      REPEND
    166  f0fc		       85 02		      sta	WSYNC
    165  f0fc					      REPEND
    166  f0fe		       85 02		      sta	WSYNC
    167  f100					      REPEND
    168  f100
    169  f100							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    170  f100							;; Adjust coordinates and directions for the next frame
    171  f100							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    172  f100
    173  f100							; check current direction for X
    174  f100		       a5 82		      lda	P0Direction
    175  f102		       29 01		      and	#%00000001	; X-Direction Bit
    176  f104		       f0 11		      beq	P0XDecr
    177  f106
    178  f106							; increment + eventually switch direction
    179  f106		       e6 80		      inc	P0XPos
    180  f108		       a5 80		      lda	P0XPos
    181  f10a		       c5 84		      cmp	P0XMax
    182  f10c		       90 1a		      bcc	P0Y
    183  f10e		       a5 82		      lda	P0Direction
    184  f110							;eor %00000001
    185  f110		       29 fe		      and	#%11111110
    186  f112		       85 82		      sta	P0Direction
    187  f114		       4c 28 f1 	      jmp	P0Y
    188  f117
    189  f117							; decrement + eventually switch direction
    190  f117				   P0XDecr
    191  f117		       c6 80		      dec	P0XPos
    192  f119		       a5 80		      lda	P0XPos
    193  f11b		       c5 83		      cmp	P0XMin
    194  f11d		       b0 09		      bcs	P0Y
    195  f11f		       a5 82		      lda	P0Direction
    196  f121							;eor %00000001
    197  f121		       09 01		      ora	#%00000001
    198  f123		       85 82		      sta	P0Direction
    199  f125		       4c 28 f1 	      jmp	P0Y
    200  f128
    201  f128
    202  f128							; check current direction for Y
    203  f128				   P0Y
    204  f128		       a5 82		      lda	P0Direction
    205  f12a		       29 02		      and	#%00000010	; Y-Direction Bit
    206  f12c		       d0 11		      bne	P0YDecr
    207  f12e
    208  f12e							; increment + eventually switch direction
    209  f12e		       e6 81		      inc	P0YPos
    210  f130		       a5 81		      lda	P0YPos
    211  f132		       c5 86		      cmp	P0YMax
    212  f134		       90 1a		      bcc	NextFrame
    213  f136		       a5 82		      lda	P0Direction
    214  f138							;eor %00000010
    215  f138		       09 02		      ora	#%00000010
    216  f13a		       85 82		      sta	P0Direction
    217  f13c		       4c 50 f1 	      jmp	NextFrame
    218  f13f
    219  f13f							; decrement + eventually switch direction
    220  f13f				   P0YDecr
    221  f13f		       c6 81		      dec	P0YPos
    222  f141		       a5 81		      lda	P0YPos
    223  f143		       c5 85		      cmp	P0YMin
    224  f145		       b0 09		      bcs	NextFrame
    225  f147		       a5 82		      lda	P0Direction
    226  f149							;eor %00000010
    227  f149		       29 fd		      and	#%11111101
    228  f14b		       85 82		      sta	P0Direction
    229  f14d		       4c 50 f1 	      jmp	NextFrame
    230  f150
    231  f150				   NextFrame
    232  f150							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    233  f150							;; Loop to next frame
    234  f150							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    235  f150		       4c 2f f0 	      jmp	StartFrame
    236  f153
    237  f153							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    238  f153							;; Lookup table for the player graphics bitmap.
    239  f153							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    240  f153				   P0Bitmap
    241  f153		       00		      byte.b	#%00000000
    242  f154		       10		      byte.b	#%00010000
    243  f155		       08		      byte.b	#%00001000
    244  f156		       1c		      byte.b	#%00011100
    245  f157		       36		      byte.b	#%00110110
    246  f158		       2e		      byte.b	#%00101110
    247  f159		       2e		      byte.b	#%00101110
    248  f15a		       3e		      byte.b	#%00111110
    249  f15b		       1c		      byte.b	#%00011100
    250  f15c
    251  f15c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    252  f15c							;; Lookup table for the player colors.
    253  f15c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    254  f15c				   P0Color
    255  f15c		       00		      byte.b	#$00
    256  f15d		       02		      byte.b	#$02
    257  f15e		       02		      byte.b	#$02
    258  f15f		       52		      byte.b	#$52
    259  f160		       52		      byte.b	#$52
    260  f161		       52		      byte.b	#$52
    261  f162		       52		      byte.b	#$52
    262  f163		       52		      byte.b	#$52
    263  f164		       52		      byte.b	#$52
    264  f165
    265  f165							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    266  f165							;; Complete ROM size
    267  f165							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    268  fffc					      org	$FFFC
    269  fffc		       00 f0		      word.w	Reset
    270  fffe		       00 f0		      word.w	Reset
