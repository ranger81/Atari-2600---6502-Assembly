    processor 6502

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Include required files with register mapping and macros
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    include "vcs.h"
    include "macro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start an uninitialized segment at $80 for var declaration.
;; We have memory from $80 to $FF to work with, minus a few at
;; the end if we use the stack.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    seg.u Variables
    org $80
P0XPos          byte        ; player 0 X coordinate
P0YPos          byte        ; player 0 Y coordinate
P0Direction     byte        ; player 0 move direction (see info.txt)
P0XMin          byte        ; player 0 minimum X coordinate
P0XMax          byte        ; player 0 maximum X coordinate
P0YMin          byte        ; player 0 minimum Y coordinate
P0YMax          byte        ; player 0 maximum Y coordinate
P0Height        byte        ; player 0 height

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start our ROM code segment starting at $F000.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    seg Code
    org $F000

Reset:
    CLEAN_START    ; macro to clean memory and TIA

    ldx #$7A       ; light purple background color
    stx COLUBK

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Initialize variables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lda #5
    sta P0XMin      ; set player 0 minimum X coordinate
    lda #127
    sta P0XMax      ; set player 0 maximum X coordinate
    lda #10
    sta P0YMin      ; set player 0 minumum Y coordinate
    lda #160
    sta P0YMax      ; set player 0 maximum Y coordinate

    lda #9
    sta P0Height    ; set player 0 sprite height

    lda %00000001   ; down and right
    sta P0Direction ; set player 0 initial directions
    
    lda #40
    sta P0XPos      ; initial player 0 X position
    lda #10
    sta P0YPos      ; initial player 0 Y position

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start a new frame by configuring VBLANK and VSYNC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
StartFrame:
    lda #2
    sta VBLANK     ; turn VBLANK on
    sta VSYNC      ; turn VSYNC on

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Display 3 vertical lines of VSYNC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    REPEAT 3
        sta WSYNC  ; first three VSYNC scanlines
    REPEND
    lda #0
    sta VSYNC      ; turn VSYNC off

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Set player horizontal position while in VBLANK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lda P0XPos     ; load register A with desired X position
    and #$7F       ; same as AND 01111111, forces bit 7 to zero
                   ; keeping the result positive

    sec            ; set carry flag before subtraction

    sta WSYNC      ; wait for next scanline
    sta HMCLR      ; clear old horizontal position values

DivideLoop:
    sbc #15        ; Subtract 15 from A
    bcs DivideLoop ; loop while carry flag is still set

    eor #7         ; adjust the remainder in A between -8 and 7
    asl            ; shift left by 4, as HMP0 uses only 4 bits
    asl
    asl
    asl
    sta HMP0       ; set smooth position value
    sta RESP0      ; fix rough position
    sta WSYNC      ; wait for next scanline
    sta HMOVE      ; apply the fine position offset

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Let the TIA output the 35 (37-2) recommended lines of VBLANK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    REPEAT 35
        sta WSYNC
    REPEND

    lda #0
    sta VBLANK     ; turn VBLANK off

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Draw the 192 visible scanlines
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;    REPEAT 60
;        sta WSYNC  ; wait for 60 empty scanlines
;    REPEND
;
;    ldy 8          ; counter to draw 8 rows of bitmap
;DrawBitmap:
;    lda P0Bitmap,Y ; load player bitmap slice of data
;    sta GRP0       ; set graphics for player 0 slice
;
;    lda P0Color,Y  ; load player color from lookup table
;    sta COLUP0     ; set color for player 0 slice
;
;    sta WSYNC      ; wait for next scanline
;
;    dey
;    bne DrawBitmap ; repeat next scanline until finished
;
;    lda #0
;    sta GRP0       ; disable P0 bitmap graphics
;
;    REPEAT 124
;        sta WSYNC  ; wait for remaining 124 empty scanlines
;    REPEND

    ;-----------------------------------------
    ldx #192       ; X counter contains the remaining scanlines
Scanline:
    txa            ; transfer X to A
    sec            ; make sure carry flag is set
    sbc P0YPos     ; subtract sprite Y coordinate
    cmp P0Height   ; are we inside the sprite height bounds?
    bcc LoadBitmap ; if result < SpriteHeight, call subroutine
    lda #0         ; else, set index to 0
LoadBitmap:
    tay
    lda P0Bitmap,Y ; load player bitmap slice of data
    sta WSYNC      ; wait for next scanline
    sta GRP0       ; set graphics for player 0 slice
    lda P0Color,Y  ; load player color from lookup table
    sta COLUP0     ; set color for player 0 slice
    dex
    bne Scanline   ; repeat next scanline until finished

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Output 30 more VBLANK overscan lines to complete our frame
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Overscan:
    lda #2
    sta VBLANK     ; turn VBLANK on again for overscan
    REPEAT 30
        sta WSYNC
    REPEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Adjust coordinates and directions for the next frame
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; check current direction for X
    lda P0Direction
    and #%00000001   ; X-Direction Bit
    beq P0XDecr

; increment + eventually switch direction
    inc P0XPos
    lda P0XPos
    cmp P0XMax
    bcc P0Y
    lda P0Direction
    ;eor %00000001
    and #%11111110
    sta P0Direction
    jmp P0Y

; decrement + eventually switch direction
P0XDecr:
    dec P0XPos
    lda P0XPos
    cmp P0XMin
    bcs P0Y
    lda P0Direction
    ;eor %00000001
    ora #%00000001
    sta P0Direction
    jmp P0Y


; check current direction for Y
P0Y:
    lda P0Direction
    and #%00000010   ; Y-Direction Bit
    bne P0YDecr

; increment + eventually switch direction
    inc P0YPos
    lda P0YPos
    cmp P0YMax
    bcc NextFrame
    lda P0Direction
    ;eor %00000010
    ora #%00000010
    sta P0Direction
    jmp NextFrame

; decrement + eventually switch direction
P0YDecr:
    dec P0YPos
    lda P0YPos
    cmp P0YMin
    bcs NextFrame
    lda P0Direction
    ;eor %00000010
    and #%11111101
    sta P0Direction
    jmp NextFrame

NextFrame:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Loop to next frame
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    jmp StartFrame

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lookup table for the player graphics bitmap.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
P0Bitmap:
    byte #%00000000
    byte #%00010000
    byte #%00001000
    byte #%00011100
    byte #%00110110
    byte #%00101110
    byte #%00101110
    byte #%00111110
    byte #%00011100

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lookup table for the player colors.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
P0Color:
    byte #$00
    byte #$02
    byte #$02
    byte #$52
    byte #$52
    byte #$52
    byte #$52
    byte #$52
    byte #$52

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Complete ROM size
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    org $FFFC
    word Reset
    word Reset
